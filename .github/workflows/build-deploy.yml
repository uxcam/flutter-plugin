name: Publish Flutter Package
on:
  workflow_dispatch:
    inputs:
      publish:
        description: Publish flutter package
        type: boolean
        default: false
        required: true

jobs:
  job_release:
    runs-on: ubuntu-latest
    name: 'Release a new version'
    steps:
      - name: Check out current commit (${{github.sha}})
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_RELEASE_PAT }}
          fetch-depth: 0
      - name: Set git user credentials
        run: |
          git config user.email "uxcam-mobile@uxcam.com"
          git config user.name "UXCam"
      - name: Get version name
        id: get-version
        run: |
          version=$(grep '^version:' pubspec.yaml | awk '{ print $2 }')
          echo $version
          echo "version=$version" >> $GITHUB_OUTPUT
      # Install dependencies
      - name: Install Flutter ðŸŽ¯
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies ðŸ“š
        run: |
          flutter pub get

      - name: Verify version
        run: |
          dart pub publish --dry-run
      - name: Publish package
        if: ${{ inputs.publish }}
        run: |
          mkdir -p $HOME/.config/dart
          CREDENTIALS="${{ secrets.PUB_CREDENTIALS }}"
          CREDENTIALS=$( echo -n $CREDENTIALS | base64 --decode)
          cat <<EOF > $HOME/.config/dart/pub-credentials.json
          $CREDENTIALS
          EOF
          dart pub publish -f
      - name: Add new tag to github
        if: ${{ inputs.publish }}
        run: |
          version="v${{ steps.get-version.outputs.version }}"
          git tag -a $version -m "Release: $version"
          git push origin --tags
      - name: Generate Changelogs
        id: changelogs
        run: |
          if ${{ inputs.publish }}; then
             current_tag=$(git describe --tags --abbrev=0)
           else 
             current_tag=HEAD
           fi

           previous_tag=$(git describe --tags --abbrev=0 ${current_tag}^)  
           logs=$(git log ${current_tag}...${previous_tag} --pretty=format:"%s" -i --grep="^feat.*:" --grep="^fix.*:" --no-merges)

           #santize commit logs 
           logs=$(awk -F ":" '{ print $2 }' <<< $logs | sed -e 's/^ *//g' | sed -e 's/^./\u&/g')

           #prepend line number 
           logs=$(awk '{print NR, "-", $0}' <<< $logs)

           # Remove new line in multiline change logs as sed doesn't support it
           logs=$((sed -e '$ ! s/$/\\n/g' | tr -d '\n')  <<< $logs)
           echo "logs=${logs}" >> $GITHUB_OUTPUT
           echo $logs
           #save logs to new file 
           touch changelog.txt
           echo "$logs" > changelog.txt

      - name: Generate Slack notification payload
        id: slack-payload
        run: |
          DATE=$(date +'%d/%m/%Y')
          ESCAPED_DATE=$(echo "$DATE" | sed -e 's/[\/&]/\\&/g')
          payload_path='./.github/workflows/slack-payload.json'
          payload=$(cat $payload_path)
          logs="${{ steps.changelogs.outputs.logs }}"
          logs=$(sed -e 's/\\n/\\\\n/g' <<< $logs)
          echo $logs

          echo "$payload" | sed -e "s/__FLUTTER_VERSION__/${{ steps.get-version.outputs.version }}/g" -e "s/__RELEASE_DATE__/${ESCAPED_DATE}/g" -e "s/__CHANGELOG__/$logs/g" > $payload_path
          cat $payload_path
      - name: Send notification to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload-file-path: './.github/workflows/slack-payload.json'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
